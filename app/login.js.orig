/* file: login.js
 * authors: H. Bouakaz, S. de Vliet, S. de Jong & E. Werkema
 * date: 26/4/2016
 * version 1.0
 *
 * Description:
 * Main script for initiating the welcome  page.
 */
<<<<<<< HEAD
define(['jquery', 'app/config', 'app/database', 'app/user', 'app/lang', 'app/string', 'app/messages', 'parsley', 'app/forms', 'app/saltedhash'], function ($, config, db, user, lang, string, messages, parsley, forms, hash) {
	// Ask for permission to write to the database on Linux and Mac OSX
	if (navigator.appVersion.indexOf("Mac")!=-1){
		var options = {
			name : 'SlimStampen',
			//icns: '/path/to/icns/file', // (optional, only for MacOS),
			process : {
				options : {
					// Can use custom environment variables for your privileged subprocess
					env : {
						'VAR' : 'VALUE'
					}
=======
define(['jquery', 'app/config', 'app/database', 'parsley', 'app/forms','app/user', 'app/lang', 'app/string', 'app/ready'], function ($, config, db, parsley, forms, user, lang, string, ready) {

	function getPermissionsForDatabase() {
		if (navigator.appVersion.indexOf("Mac")!=-1){
			var options = {
				name : 'SlimStampen',
				//icns: '/path/to/icns/file', // (optional, only for MacOS),
				process : {
					options : {
						// Can use custom environment variables for your privileged subprocess
						env : {
							'VAR' : 'VALUE'
						}
>>>>>>> 484316e98418b4f2c6b4bd72bca9e38b823bd728

						// ... and all other subprocess options described here
						// https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback
					},
					on : function (ps) {
						ps.stdout.on('data', function (data) {});
						setTimeout(function () {
							ps.kill();
						}.bind(ps), 50000);
					}
				}
			};
			electronsudo.exec("chmod 600 database/user.sqlite", options, function (error) {});
		}
	}

<<<<<<< HEAD
	// Function for obtaining the GET data from the url
  function $_GET(q,s) {
    s = (s) ? s : window.location.search;
    var re = new RegExp(q+'=([^&]*)','i');
    return (s=s.replace(/^\?/,'&').match(re)) ?s=s[1] :s='';
  }
=======
	// Function for displaying messages on main screen
	function showMessage(message) {
		var element = $("#messages");
		switch(message) {
		case "create_dataset":
			message = lang("success_createdataset");
			break;
		case "open_dataset":
			message = lang("success_opendataset");
			break;
		case "login":
			message = lang("success_login");
			break;
		case "logout":
			message = lang("success_logout");
			break;
		case "logout_unknown_cookie":
			message = lang("error_logout");
			break;
		case "register":
			message = lang("success_register");
			break;
		default:
			message = lang("message_default");
		}
		element.append("<p>"+message+"</p>").show();
	}

	// Function for obtaining the GET data from the url
	function $_GET(q,s) {
		s = (s) ? s : window.location.search;
		var re = new RegExp(q+'=([^&]*)','i');
		return (s=s.replace(/^\?/,'&').match(re)) ?s=s[1] :s='';
	}

	function hideMessage() {
		var element = $("#messages");
		element.hide();
	}

>>>>>>> 484316e98418b4f2c6b4bd72bca9e38b823bd728
	function getUser() {
		var user = $("#username").val().toLowerCase();
		var query = user.indexOf("@") != -1 ? "getUserbyEmail" : "getUserbyUsername";
		result = db.getQuery(query, [user]);
		return result;
	}

	function handleLogin() {
		var username = $("#username").val().toLowerCase();
		var password = $("#password").val();
		var field;
		if (db.online()) {
			db.getOnlineQuery("getUserbyUsername", [username], function(result) {
				field = $("#username").parsley();
				if (result.length !== 0) {
					field.removeError('error');
					field = $("#password").parsley();
					if (hash.verify(password,result[0].user_password) ) {
						user.setCookie(result);
						console.log(document.cookie);
						db.synchronize(user.getCookie('user_id'), function() {
							db.close();
							window.location = "index.html?message=login";
						});
					} else {
						field.removeError('error');
						field.addError('error', {message: lang("error_passwordincorrect")});
					}
				} else {
					field.removeError('error');
					field.addError('error', {message: lang("error_usernameincorrect")});
				}
			});
		} else {
			var result = db.getQuery("getUserbyUsername", [username]);
			field = $("#username").parsley();
			if (result.length !== 0) {
				field.removeError('error');
				field = $("#password").parsley();
				if (hash.verify(password,result[0].user_password) ) {
					user.setCookie(result);
					window.location = "index.html?message=login";
				} else {
					field.removeError('error');
					field.addError('error', {message: lang("error_passwordincorrect")});
				}
			} else {
				field.removeError('error');
				field.addError('error', {message: lang("error_usernameincorrect")});
			}
		}
	}

	forms.initializeForm('#loginForm', handleLogin);

	if ($_GET('message')) {
		messages.show(config.constant("MESSAGES"), $_GET('message'));
	}

	// if (user.check()) {
	// 	window.location = "index.html?message=login_automatic";
	// }

	// Write localisable text to the page
	string.fillinTextClasses();
	$("#username").prop("placeholder", lang("label_username"));
	$("#password").prop("placeholder", lang("label_password"));

	ready.on(function() {
		getPermissionsForDatabase();
	});

});
